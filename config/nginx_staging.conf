# bort Rails App

# This will be referred to later when we proxy pass to one of these instances.
# It must have a unique name.
upstream bort_mongrel {
    # make sure you match this to the number of servers spawned by your
    # mongrel cluster
    server 127.0.0.1:11900;
    server 127.0.0.1:11901;
}

server {
    listen       80;
    root /home/bort/www/current/public;
    index index.html index.htm;
    #server_name .bort.com; 
    server_name quotesare.us; 
    client_max_body_size 200M;
    client_body_timeout 1000;

    access_log  /home/bort/www/current/log/access.log  main; #off; 
    error_log   /home/bort/www/current/log/error.log  debug; #off; 

    #ssl_certificate      /home/bort/www/current/config/bort_com.crt;
    #ssl_certificate_key  /home/bort/www/current/config/bort_com.key;

    if (-f $document_root/system/maintenance.html) {
        rewrite  ^(.*)$  /system/maintenance.html last;
        break;
    }

#
# this is just for staging !!
#
    auth_basic "Restricted";
    auth_basic_user_file bort_passwd;

    location / {
        # forward user's IP address to rails
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded_for $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect false;
        proxy_read_timeout 300;
        proxy_max_temp_file_size 0;

        #rewrites http://www.mydomain.nl/foo => http://mydomain.nl/foo
        if ($host ~* www\.(.*)) {
          set $host_without_www $1;
          rewrite ^(.*)$ http://$host_without_www$1 permanent; # $1 contains '/foo', not 'www.mydomain.com/foo'
        }
        # hide subversion files
        rewrite \.svn / last;

        # serve static pages directly, no rails. no rewrite.
        if (-f $request_filename) {
        break;
        }

        # check for index.html then rewrite the url to add /index.html to
        # the end of it and then break to send it to the nex config rule.
        if (-f $request_filename/index.html) {
        rewrite (.*) $1/index.html break;
        }

        # This is the meat of the rails page caching config. It adds .html
        # to the end of the url and then checks the filesystem for that
        # file. If it exists, then we rewite the url to have explicit
        # .html on the end and then send it on its way to the next config
        # rule.  if there is no file on the fs then it sets all the
        # necessary headers and proxies to our upstream mongrels
        
        if (-f $request_filename.html) {
          rewrite (.*) $1.html break;
        } 

        if (!-f $request_filename) {
        proxy_pass http://bort_mongrel;
        break;
        }
    }

# redirect server error pages to the static page /50x.html
    error_page   500 502 503 504  /500.html;
    location = /500.html {
        root /home/bort/www/current/public;
    }
}

